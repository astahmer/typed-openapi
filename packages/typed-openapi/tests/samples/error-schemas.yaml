openapi: 3.0.3
info:
  title: Error Schema Test API
  version: 1.0.0
paths:
  /users/{id}:
    get:
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /posts:
    post:
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
      required: [id, name, email]
    
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        authorId:
          type: string
      required: [id, title, content, authorId]
    
    PostInput:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
      required: [title, content]
    
    AuthError:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
        timestamp:
          type: string
      required: [error, code]
    
    NotFoundError:
      type: object
      properties:
        message:
          type: string
        resource:
          type: string
      required: [message, resource]
    
    ValidationError:
      type: object
      properties:
        message:
          type: string
        field:
          type: string
        value:
          type: string
      required: [message, field]
    
    ForbiddenError:
      type: object
      properties:
        error:
          type: string
        reason:
          type: string
      required: [error, reason]
    
    ServerError:
      type: object
      properties:
        error:
          type: string
        details:
          type: string
      required: [error]
